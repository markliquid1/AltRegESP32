<!DOCTYPE HTML>

<html>

<head>
  <meta charset="utf-8" />
  <title>X Engineering Alternator Regulator</title>
  <meta content="width=device-width, initial-scale=1" name="viewport" />
  <link href="/uPlot.min.css" rel="stylesheet" />
  <script src="/uPlot.iife.min.js">
    function syncToggleToHidden(name) {
      const checkbox = document.getElementById(name + "_checkbox");
      const hidden = document.getElementById(name);
      if (checkbox && hidden) {
        hidden.value = checkbox.checked ? "1" : "0";
        hidden.form.submit();
      }
    }
  </script>
  <style>
    :root {
      --primary: #333333;
      /* Dark gray primary */
      --accent: #ff6600;
      /* Orange accent */
      --bg-light: #f5f5f5;
      /* Very light gray background */
      --text-dark: #333333;
      /* Dark text */
      --text-light: #ffffff;
      /* Light text */
      --card-light: #ffffff;
      /* White card background */
      --border: #dddddd;
      /* Light border */
      --reading: #333333;
      /* Reading text color (changed from green) */
      --radius: 4px;
      /* Border radius */
    }

    body {
      margin: 0;
      font-family: Arial, Helvetica, sans-serif;
      padding: 0.5rem;
      background-color: var(--bg-light);
      color: var(--text-dark);
      line-height: 1.4;
      font-size: 14px;
    }

    h2 {
      color: var(--text-dark);
      border-bottom: 2px solid var(--accent);
      padding-bottom: 0.25rem;
      margin-top: 1rem;
      margin-bottom: 0.75rem;
      font-size: 18px;
    }

    input[type="submit"] {
      background-color: #555555;
      color: white;
      border: none;
      padding: 4px 10px;
      cursor: pointer;
      border-radius: var(--radius);
      font-weight: bold;
      width: 60px;
    }

    input[type="submit"]:hover {
      background-color: var(--accent);
    }

    input[type="text"],
    input[type="number"] {
      background: #ffffff;
      color: var(--text-dark);
      border: 1px solid var(--border);
      border-radius: var(--radius);
      padding: 4px;
      width: 80px;
    }

    input:focus {
      outline: none;
      border-color: var(--accent);
    }

    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
      gap: 10px;
    }

    .card {
      background: var(--card-light);
      padding: 10px;
      border-left: 2px solid var(--accent);
      border-radius: var(--radius);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
      margin-bottom: 4px;
    }

    .card p {
      margin: 0.25rem 0;
    }

    .card p:first-child {
      font-weight: bold;
      color: var(--text-dark);
      border-bottom: 1px solid var(--border);
      padding-bottom: 0.25rem;
      margin-bottom: 0.25rem;
      font-size: 13px;
    }

    .reading {
      font-size: 1.1rem;
      font-weight: bold;
    }

    .reading span {
      color: var(--reading);
    }

    .settings-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 10px;
    }

    .settings-card {
      background: var(--card-light);
      border-radius: var(--radius);
      padding: 10px;
      margin-bottom: 10px;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .section-title {
      background-color: #f0f0f0;
      color: var(--text-dark);
      padding: 6px 10px;
      margin: 0 0 10px 0;
      border-radius: var(--radius);
      font-weight: bold;
      border-left: 2px solid var(--accent);
      font-size: 14px;
    }

    hr {
      border: none;
      border-top: 1px solid var(--border);
      margin: 8px 0;
    }

    .form-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 8px;
    }

    .form-label {
      flex: 1;
      text-align: left;
      padding-right: 10px;
    }

    .form-input {
      display: flex;
      justify-content: flex-end;
      align-items: center;
    }

    /* Responsive adjustments */
    @media (max-width: 992px) {
      .settings-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @media (max-width: 768px) {
      .settings-grid {
        grid-template-columns: 1fr;
      }

      body {
        font-size: 13px;
      }

      .grid {
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      }
    }

    /* Toggle switch styling */
    .switch {
      position: relative;
      display: inline-block;
      width: 40px;
      height: 20px;
    }

    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: .4s;
      border-radius: 20px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 14px;
      width: 14px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: .4s;
      border-radius: 50%;
    }

    input:checked+.slider {
      background-color: #2196F3;
    }

    input:checked+.slider:before {
      transform: translateX(20px);
    }

    .toggle-label {
      font-size: 0.9em;
      margin: 0 8px;
      vertical-align: middle;
    }

    .toggle-label {
      font-size: 0.9em;
      margin: 0 8px;
      vertical-align: middle;
    }
  </style>
  <script>
    function submitMessage() {
      setTimeout(function () { document.location.reload(false); }, 500);
    }
  </script>
</head>

<body>
  <iframe name="hidden-form" style="display:none"></iframe>
  <h2>Settings</h2>
  <div class="settings-grid">
    <div class="settings-card">
      <div class="section-title">Charging</div>
      <div class="form-row">
        <div class="form-label">Alternator Temp Limit (F) (%TemperatureLimitF%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <input name="TemperatureLimitF" type="text" />
            <input onclick="submitMessage()" type="submit" value="Set" />
          </form>
        </div>
      </div>
      <hr />
      <div class="form-row">
        <div class="form-label">Bulk Target (%FullChargeVoltage%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <input name="FullChargeVoltage" type="number" />
            <input onclick="submitMessage()" type="submit" value="Set" />
          </form>
        </div>
      </div>
      <hr />
      <div class="form-row">
        <div class="form-label">Rate Target (A) (%TargetAmpz%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <input name="TargetAmpz" type="number" />
            <input onclick="submitMessage()" type="submit" value="Set" />
          </form>
        </div>
      </div>
      <hr />
      <div class="form-row">
        <div class="form-label">Float Target (V) (%TargetFloatVoltage1%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <input name="TargetFloatVoltage1" type="number" />
            <input onclick="submitMessage()" type="submit" value="Set" />
          </form>
        </div>
      </div>
    </div>
    <div class="settings-card">
      <div class="section-title">Field</div>
      <div class="form-row">
        <div class="form-label">Field Switch Freq (hz) (%SwitchingFrequency%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <input name="SwitchingFrequency" type="number" />
            <input onclick="submitMessage()" type="submit" value="Set" />
          </form>
        </div>
      </div>
      <hr />
      <div class="form-row">
        <div class="form-label">Field Adj Step (V) (%interval1%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <input name="interval1" type="number" />
            <input onclick="submitMessage()" type="submit" value="Set" />
          </form>
        </div>
      </div>
      <hr />
      <div class="form-row">
        <div class="form-label">Field Adj. Time Interval (ms) (%FieldAdjustmentInterval1%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <input name="FieldAdjustmentInterval1" type="number" />
            <input onclick="submitMessage()" type="submit" value="Set" />
          </form>
        </div>
      </div>
      <hr />
      <div class="form-row">
        <div class="form-label">Manual Field Setpoint (V) (%ManualVoltage%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <input name="ManualVoltage" type="number" />
            <input onclick="submitMessage()" type="submit" value="Set" />
          </form>
        </div>
      </div>
    </div>
    <div class="settings-card">
      <div class="section-title">System</div>
      <div class="form-row">
        <div class="form-label">Switch Panel Override (%SwitchControlOverride1%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <span class="toggle-label">Off</span>
            <label class="switch">
              <input id="SwitchControlOverride1_checkbox" type="checkbox"
                onchange="document.getElementById('SwitchControlOverride1').value = this.checked ? '1' : '0'; this.form.submit(); submitMessage();" />
              <span class="slider round"></span>
            </label>
            <span class="toggle-label">On</span>
            <input id="SwitchControlOverride1" name="SwitchControlOverride1" type="number"
              value="%SwitchControlOverride1%" style="display:none;" />
          </form>
        </div>
      </div>
      <hr />
      <div class="form-row">
        <div class="form-label">Regulator Output (%OnOff1%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <span class="toggle-label">Off</span>
            <label class="switch">
              <input id="OnOff1_checkbox" type="checkbox"
                onchange="document.getElementById('OnOff1').value = this.checked ? '1' : '0'; this.form.submit(); submitMessage();" />
              <span class="slider round"></span>
            </label>
            <span class="toggle-label">On</span>
            <input id="OnOff1" name="OnOff1" type="number" value="%OnOff1%" style="display:none;" />
          </form>
        </div>
      </div>
      <hr />
      <div class="form-row">
        <div class="form-label">Manual Field Control (%ManualFieldToggle1%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <span class="toggle-label">Off</span>
            <label class="switch">
              <input id="ManualFieldToggle1_checkbox" type="checkbox"
                onchange="document.getElementById('ManualFieldToggle1').value = this.checked ? '1' : '0'; this.form.submit(); submitMessage();" />
              <span class="slider round"></span>
            </label>
            <span class="toggle-label">On</span>
            <input id="ManualFieldToggle1" name="ManualFieldToggle1" type="number" value="%ManualFieldToggle1%"
              style="display:none;" />
          </form>
        </div>
      </div>
      <hr />
      <div class="form-row">
        <div class="form-label">Charge Rate (%HiLow1%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <span class="toggle-label">Low</span>
            <label class="switch">
              <input id="HiLow1_checkbox" type="checkbox"
                onchange="document.getElementById('HiLow1').value = this.checked ? '1' : '0'; this.form.submit(); submitMessage();" />
              <span class="slider round"></span>
            </label>
            <span class="toggle-label">High</span>
            <input id="HiLow1" name="HiLow1" type="number" value="%HiLow1%" style="display:none;" />
          </form>
        </div>
      </div>
      <hr />
      <div class="form-row">
        <div class="form-label">Limp Home Mode (%LimpHome1%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <span class="toggle-label">Off</span>
            <label class="switch">
              <input id="LimpHome1_checkbox" type="checkbox"
                onchange="document.getElementById('LimpHome1').value = this.checked ? '1' : '0'; this.form.submit(); submitMessage();" />
              <span class="slider round"></span>
            </label>
            <span class="toggle-label">On</span>
            <input id="LimpHome1" name="LimpHome1" type="number" value="%LimpHome1%" style="display:none;" />
          </form>
        </div>
      </div>

      <hr />
      <div class="form-row">
        <div class="form-label">VE.Direct Data (%VeData1%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <span class="toggle-label">Off</span>
            <label class="switch">
              <input id="VeData1_checkbox" type="checkbox"
                onchange="document.getElementById('VeData1').value = this.checked ? '1' : '0'; this.form.submit(); submitMessage();" />
              <span class="slider round"></span>
            </label>
            <span class="toggle-label">On</span>
            <input id="VeData1" name="VeData1" type="number" value="%VeData1%" style="display:none;" />
          </form>
        </div>
      </div>
      <hr />
      <div class="form-row">
        <div class="form-label">NMEA 0183 Data (%NMEA0183Data1%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <span class="toggle-label">Off</span>
            <label class="switch">
              <input id="NMEA0183Data1_checkbox" type="checkbox"
                onchange="document.getElementById('NMEA0183Data1').value = this.checked ? '1' : '0'; this.form.submit(); submitMessage();" />
              <span class="slider round"></span>
            </label>
            <span class="toggle-label">On</span>
            <input id="NMEA0183Data1" name="NMEA0183Data1" type="number" value="%NMEA0183Data1%"
              style="display:none;" />
          </form>
        </div>
      </div>
      <hr />
      <div class="form-row">
        <div class="form-label">NMEA 2000 Data (%NMEA2KData1%):</div>
        <div class="form-input">
          <form action="/get" target="hidden-form">
            <span class="toggle-label">Off</span>
            <label class="switch">
              <input id="NMEA2KData1_checkbox" type="checkbox"
                onchange="document.getElementById('NMEA2KData1').value = this.checked ? '1' : '0'; this.form.submit(); submitMessage();" />
              <span class="slider round"></span>
            </label>
            <span class="toggle-label">On</span>
            <input id="NMEA2KData1" name="NMEA2KData1" type="number" value="%NMEA2KData1%" style="display:none;" />
          </form>
        </div>
      </div>

    </div>





  </div>
  <h2>Live Data</h2>
  <div class="settings-grid">
    <div class="settings-card">
      <div class="section-title">Battery</div>
      <div class="grid">
        <div class="card">
          <p>ADS Battery Voltage</p>
          <p class="reading"><span id="BatteryVID">0</span> V</p>
        </div>
        <div class="card">
          <p>Victron Battery Voltage</p>
          <p class="reading"><span id="VictronVoltageID">0</span> V</p>
        </div>
        <div class="card">
          <p>INA Battery Voltage</p>
          <p class="reading"><span id="IBVID">0</span> V</p>
        </div>
        <div class="card">
          <p>INA Battery Current</p>
          <p class="reading"><span id="BCurrID">0</span> A</p>
        </div>
      </div>
    </div>
    <div class="settings-card">
      <div class="section-title">Alternator</div>
      <div class="grid">
        <div class="card">
          <p>ADS Alternator Current</p>
          <p class="reading"><span id="MeasAmpsID">0</span> A</p>
        </div>
        <div class="card">
          <p>Alternator Temperature</p>
          <p class="reading"><span id="AltTempID">0</span> °F</p>
        </div>
        <div class="card">
          <p>Field Duty Cycle</p>
          <p class="reading"><span id="DutyCycleID">0</span> %</p>
        </div>
        <div class="card">
          <p>Field Voltage</p>
          <p class="reading"><span id="FieldVoltsID">0</span> V</p>
        </div>
        <div class="card">
          <p>Field Current</p>
          <p class="reading"><span id="FieldAmpsID">0</span> A</p>
        </div>
      </div>
    </div>
    <div class="settings-card">
      <div class="section-title">System</div>
      <div class="grid">
        <div class="card">
          <p>Engine Speed</p>
          <p class="reading"><span id="RPMID">0</span> rev/min</p>
        </div>
        <div class="card">
          <p>GPS Heading</p>
          <p class="reading"><span id="GPSHID">0</span> °</p>
        </div>
        <div class="card">
          <p>ADS Ch3 Voltage</p>
          <p class="reading"><span id="ADS3ID">0</span> V</p>
        </div>
      </div>
    </div>
  </div>
  <div class="settings-card">
    <div class="section-title">Hardware and Code</div>
    <div class="grid">
      <div class="card">
        <p>Loop Time</p>
        <p class="reading"><span id="LoopTimeID">0</span> μs</p>
      </div>
      <div class="card">
        <p>Maximum Loop Time</p>
        <p class="reading"><span id="MaximumLoopTimeID">0</span> μs</p>
      </div>
      <div class="card">
        <p>Analog Read Time (Max)</p>
        <p class="reading"><span id="AnalogReadTimeID">0</span> μs</p>
      </div>
      <div class="card">
        <p>Wifi Send Time</p>
        <p class="reading"><span id="SendWifiTimeID">0</span> μs</p>
      </div>
      <div class="card">
        <p>VE Dir. Read Time</p>
        <p class="reading"><span id="VeTimeID">0</span> μs</p>
      </div>
      <div class="card">
        <p>Wifi Strength</p>
        <p class="reading"><span id="WifiStrengthID">0</span> dB</p>
      </div>
      <div class="card">
        <p>Wifi Heartbeat</p>
        <p class="reading"><span id="WifiHeartBeatID">0</span> #</p>
      </div>
    </div>
  </div>
  <h2>Plots</h2>



  <div class="settings-card">
    <div class="section-title">WiFi Signal Strength History</div>
    <div class="plot-container" id="wifi-plot"></div>
  </div>


  <div class="settings-card">
    <div class="section-title">Current and Temperature History</div>
    <div class="plot-container" id="current-temp-plot"></div>
  </div>
  <div class="settings-card">
    <div class="section-title">Battery Voltage History</div>
    <div class="plot-container" id="voltage-plot"></div>
  </div>



  <script>
    function debounce(fn, delay) {
      let timer = null;
      return function (...args) {
        clearTimeout(timer);
        timer = setTimeout(() => fn.apply(this, args), delay);
      };
    }
  
    // WiFi Signal Plot Data
    const wifiData = [[], []];
    let uplot;
    
    // Current and Temperature Plot Data
    // [timestamps, battery current, alternator current, field current, alt temp]
    const currentTempData = [[], [], [], [], []];
    let currentTempPlot;
    
    // Voltage Plot Data
    // [timestamps, ADS Battery V, Victron Battery V, INA Battery V]
    const voltageData = [[], [], [], []];
    let voltagePlot;
    
    const maxPoints = 60;
    let lastPlotUpdate = 0; // Timestamp of last time we updated the plot
    const PLOT_UPDATE_INTERVAL_MS = 2000; // Only update every 2 seconds (adjust as needed)
  
    function schedulePlotUpdate() {
      if (!window.updateScheduled) {
        window.updateScheduled = true;
        requestAnimationFrame(() => {
          uplot.setData(wifiData);
          window.updateScheduled = false;
        });
      }
    }
    
    function scheduleCurrentTempPlotUpdate() {
      if (!window.currentTempUpdateScheduled && currentTempPlot) {
        window.currentTempUpdateScheduled = true;
        requestAnimationFrame(() => {
          currentTempPlot.setData(currentTempData);
          window.currentTempUpdateScheduled = false;
        });
      }
    }
    
    function scheduleVoltagePlotUpdate() {
      if (!window.voltageUpdateScheduled && voltagePlot) {
        window.voltageUpdateScheduled = true;
        requestAnimationFrame(() => {
          voltagePlot.setData(voltageData);
          window.voltageUpdateScheduled = false;
        });
      }
    }
  
    function initWifiPlot() {
      const plotEl = document.getElementById('wifi-plot');
      if (!plotEl) {
        console.error("WiFi plot element not found");
        return;
      }
      
      const opts = {
        width: plotEl.clientWidth,
        height: 300,
        title: "WiFi Signal Strength",
        series: [
          {},
          {
            label: "Signal Strength (dB)",
            stroke: "#ff6600",
            width: 2,
            scale: "strength"
          }
        ],
        axes: [
          {},
          {
            scale: "strength",
            label: "dB",
            grid: { show: true }
          }
        ],
        scales: {
          x: { time: true },
          strength: {
            auto: true,
            range: [-90, -30]
          }
        },
        plugins: [{
          hooks: {
            init: [
              (u) => {
                const resizePlot = debounce(() => {
                  const plotEl = document.getElementById("wifi-plot");
                  if (plotEl && uplot) {
                    uplot.setSize({ width: plotEl.clientWidth, height: 300 });
                  }
                }, 1000);  // Delay resizing until 1s after changes stop
                const ro = new ResizeObserver(resizePlot);
                ro.observe(plotEl);
              }
            ]
          }
        }]
      };
  
      uplot = new uPlot(opts, wifiData, plotEl);
      const startTime = Math.floor(Date.now() / 1000);
      wifiData[0].push(startTime);
      wifiData[1].push(-65);
      uplot.setData(wifiData);
    }
    
    function initCurrentTempPlot() {
      const plotEl = document.getElementById('current-temp-plot');
      if (!plotEl) {
        console.error("Current & Temperature plot element not found");
        return;
      }
      
      const opts = {
        width: plotEl.clientWidth,
        height: 300,
        title: "Current & Temperature History",
        series: [
          {},
          {
            label: "Battery Current (A)",
            stroke: "#4CAF50", // Green
            width: 2,
            scale: "current"
          },
          {
            label: "Alternator Current (A)",
            stroke: "#2196F3", // Blue
            width: 2,
            scale: "current"
          },
          {
            label: "Field Current (A)",
            stroke: "#9C27B0", // Purple
            width: 2,
            scale: "current"
          },
          {
            label: "Alt. Temp (°F)",
            stroke: "#FF5722", // Deep Orange
            width: 2,
            scale: "temp"
          }
        ],
        axes: [
          {},
          {
            scale: "current",
            label: "Amperes",
            grid: { show: true },
            side: 3 // 1: top, 2: right, 3: bottom, 4: left
          },
          {
            scale: "temp",
            label: "°F",
            grid: { show: false },
            side: 2 // right side
          }
        ],
        scales: {
          x: { time: true },
          current: {
            auto: true,
          },
          temp: {
            auto: true,
          }
        },
        plugins: [{
          hooks: {
            init: [
              (u) => {
                const resizePlot = debounce(() => {
                  const plotEl = document.getElementById("current-temp-plot");
                  if (plotEl && currentTempPlot) {
                    currentTempPlot.setSize({ width: plotEl.clientWidth, height: 300 });
                  }
                }, 1000);
                const ro = new ResizeObserver(resizePlot);
                ro.observe(plotEl);
              }
            ]
          }
        }]
      };
  
      currentTempPlot = new uPlot(opts, currentTempData, plotEl);
      const startTime = Math.floor(Date.now() / 1000);
      currentTempData[0].push(startTime);
      currentTempData[1].push(0);
      currentTempData[2].push(0);
      currentTempData[3].push(0);
      currentTempData[4].push(0);
      currentTempPlot.setData(currentTempData);
    }
    
    function initVoltagePlot() {
      const plotEl = document.getElementById('voltage-plot');
      if (!plotEl) {
        console.error("Voltage plot element not found");
        return;
      }
      
      const opts = {
        width: plotEl.clientWidth,
        height: 300,
        title: "Battery Voltage History",
        series: [
          {},
          {
            label: "ADS Battery (V)",
            stroke: "#FF9800", // Orange
            width: 2,
            scale: "voltage"
          },
          {
            label: "Victron Battery (V)",
            stroke: "#3F51B5", // Indigo
            width: 2,
            scale: "voltage"
          },
          {
            label: "INA Battery (V)",
            stroke: "#607D8B", // Blue Grey
            width: 2,
            scale: "voltage"
          }
        ],
        axes: [
          {},
          {
            scale: "voltage",
            label: "Volts",
            grid: { show: true }
          }
        ],
        scales: {
          x: { time: true },
          voltage: {
            auto: true,
          }
        },
        plugins: [{
          hooks: {
            init: [
              (u) => {
                const resizePlot = debounce(() => {
                  const plotEl = document.getElementById("voltage-plot");
                  if (plotEl && voltagePlot) {
                    voltagePlot.setSize({ width: plotEl.clientWidth, height: 300 });
                  }
                }, 1000);
                const ro = new ResizeObserver(resizePlot);
                ro.observe(plotEl);
              }
            ]
          }
        }]
      };
  
      voltagePlot = new uPlot(opts, voltageData, plotEl);
      const startTime = Math.floor(Date.now() / 1000);
      voltageData[0].push(startTime);
      voltageData[1].push(0);
      voltageData[2].push(0);
      voltageData[3].push(0);
      voltagePlot.setData(voltageData);
    }
  
    window.addEventListener("load", function () {
      initWifiPlot();
      initCurrentTempPlot();
      initVoltagePlot();
  
      if (!!window.EventSource) {
        const fields = {
          AltTempID: "AlternatorTemperatureF",
          LoopTimeID: "LoopTime",
          MaximumLoopTimeID: "MaximumLoopTime",
          DutyCycleID: "DutyCycle",
          BatteryVID: "BatteryV",
          MeasAmpsID: "MeasuredAmps",
          RPMID: "RPM",
          ADS3ID: "Channel3V",
          IBVID: "IBV",
          BCurrID: "Bcur",
          VictronVoltageID: "VictronVoltage",
          FieldVoltsID: "vvout",
          FieldAmpsID: "iiout",
          GPSHID: "HeadingNMEA",
          WifiStrengthID: "WifiStrength",
          WifiHeartBeatID: "WifiHeartBeat",
          AnalogReadTimeID: "AnalogReadTime",
          SendWifiTimeID: "SendWifiTime",
          VeTimeID: "VeTime"
        };
  
        const source = new EventSource('/events');
        source.addEventListener('BulkData', function (e) {
          const data = JSON.parse(e.data);
          for (const [elementId, key] of Object.entries(fields)) {
            const el = document.getElementById(elementId);
            if (el && key in data) {
              el.innerHTML = data[key];
            }
          }
  
          const now = Math.floor(Date.now() / 1000);
          
          // Update WiFi Signal plot
          if ('WifiStrength' in data && typeof uplot !== 'undefined') {
            const strength = parseFloat(data.WifiStrength);
            wifiData[0].push(now);
            wifiData[1].push(strength);
            if (wifiData[0].length > maxPoints) {
              wifiData[0].shift();
              wifiData[1].shift();
            }
            
            // Only update the plot if enough time has passed
            const nowMs = Date.now();
            if (nowMs - lastPlotUpdate > PLOT_UPDATE_INTERVAL_MS) {
              schedulePlotUpdate();
              lastPlotUpdate = nowMs;
            }
          }
          
          // Update Current & Temperature plot
          if (typeof currentTempPlot !== 'undefined') {
            const battCurrent = 'Bcur' in data ? parseFloat(data.Bcur) : null;
            const altCurrent = 'MeasuredAmps' in data ? parseFloat(data.MeasuredAmps) : null;
            const fieldCurrent = 'iiout' in data ? parseFloat(data.iiout) : null;
            const altTemp = 'AlternatorTemperatureF' in data ? parseFloat(data.AlternatorTemperatureF) : null;
            
            currentTempData[0].push(now);
            currentTempData[1].push(battCurrent);
            currentTempData[2].push(altCurrent);
            currentTempData[3].push(fieldCurrent);
            currentTempData[4].push(altTemp);
            
            if (currentTempData[0].length > maxPoints) {
              currentTempData[0].shift();
              currentTempData[1].shift();
              currentTempData[2].shift();
              currentTempData[3].shift();
              currentTempData[4].shift();
            }
            
            // Update using the same interval as wifi plot
            const nowMs = Date.now();
            if (nowMs - lastPlotUpdate > PLOT_UPDATE_INTERVAL_MS) {
              scheduleCurrentTempPlotUpdate();
            }
          }
          
          // Update Voltage plot
          if (typeof voltagePlot !== 'undefined') {
            const adsBattV = 'BatteryV' in data ? parseFloat(data.BatteryV) : null;
            const victronBattV = 'VictronVoltage' in data ? parseFloat(data.VictronVoltage) : null;
            const inaBattV = 'IBV' in data ? parseFloat(data.IBV) : null;
            
            voltageData[0].push(now);
            voltageData[1].push(adsBattV);
            voltageData[2].push(victronBattV);
            voltageData[3].push(inaBattV);
            
            if (voltageData[0].length > maxPoints) {
              voltageData[0].shift();
              voltageData[1].shift();
              voltageData[2].shift();
              voltageData[3].shift();
            }
            
            // Update using the same interval as wifi plot
            const nowMs = Date.now();
            if (nowMs - lastPlotUpdate > PLOT_UPDATE_INTERVAL_MS) {
              scheduleVoltagePlotUpdate();
            }
          }
        }, false);
      }
  
      // Initialize toggle states on page load
      document.getElementById("ManualFieldToggle1_checkbox").checked = (document.getElementById("ManualFieldToggle1").value === "1");
      document.getElementById("SwitchControlOverride1_checkbox").checked = (document.getElementById("SwitchControlOverride1").value === "1");
      document.getElementById("OnOff1_checkbox").checked = (document.getElementById("OnOff1").value === "1");
      document.getElementById("LimpHome1_checkbox").checked = (document.getElementById("LimpHome1").value === "1");
      document.getElementById("HiLow1_checkbox").checked = (document.getElementById("HiLow1").value === "1");
      document.getElementById("VeData1_checkbox").checked = (document.getElementById("VeData1").value === "1");
      document.getElementById("NMEA0183Data1_checkbox").checked = (document.getElementById("NMEA0183Data1").value === "1");
      document.getElementById("NMEA2KData1_checkbox").checked = (document.getElementById("NMEA2KData1").value === "1");
    });
  </script>
</body>

</html>
